nw
library(quantmod)
library(xts)
library(zoo)
View(dca)
View(data)
data <- do.call(merge, eapply(envt1, Cl))
View(data)
#data <- data[,-c(21,25)] #delete Ethereum anf Thether unavailable crpto
dataframe<- as.data.frame(na.omit (data))  #data before 2007 unavailable for Ethereum
datana <- na.omit(data)  # as zoo
R_data <- diff(log(datana)) # as zoo
R_data <- R_data[-1,]
R_dataframe <- as.data.frame(R_data)
R_dataframe <- na.omit(R_dataframe)
View(R_dataframe)
library(fBasics)
return <- cbind(rownames(R_dataframe),R_dataframe)
colnames(return) <- c("date","Brasil","Indonesia","NG","Soybean","Japan",
"India","Turkey","China","Bitcoin",
"france","Italy","UK","oil","Canada",
"Germany","Agentina","corn","Aluminium",
"Wheat","Gold","Southkorea","Sugar","Mexico",
"Russia","US")
write_xlsx(return,"return.xlsx")
library(writexl)
write_xlsx(return,"return.xlsx")
return <- cbind(rownames(R_dataframe),R_dataframe)
View(return)
View(R_dataframe)
colnames(R_dataframe)
colnames(R_dataframe) <- c("Brasil","Indonesia","NaturalGas","Soybean","Japan",
"India","Turkey","China","Bitcoin",
"france","Italy","UK","oil","Canada",
"Germany","Agentina","corn","Aluminium",
"Wheat","Gold","Ethereum","Southkorea","Sugar","Mexico",
"Tehther","Russia","US")
return <- cbind(rownames(R_dataframe),R_dataframe)
View(return)
write_xlsx(return,"return.xlsx")
colnames(return$`rownames(R_dataframe)`) <- "Date"
colnames(return$`rownames(R_dataframe)`) <- ("Date")
colnames(return)[1] <- "Date"
View(return)
View(return)
write_xlsx(return,"return.xlsx")
head(acg2020)
head(R_dataframe)
class(R_dataframe)
class(acg2020)
var_d <- as.zoo(R_dataframe)
class(var_d)
data("var_d")
View(R_dataframe)
library(zoo)
var_d <- as.zoo(R_dataframe)
data("var_d")
head(var_d)
data(acg2020)
library((ConnectednessApproach::))
library(ConnectednessApproach)
dca = ConnectednessApproach(var_d,
nlag=1,
nfore=12,
window.size=100,
model="TVP-VAR",
connectedness="Time",
VAR_config=list(TVPVAR=list(kappa1=0.99, kappa2=0.96, prior="BayesPrior")))
library(ConnectednessApproach)
data("dy2012")
head(dy2012)
dca = ConnectednessApproach(dy2012,
nlag=4,
nfore=10,
model="VAR",
connectedness="Time",
Connectedness_config=list(TimeConnectedness=list(generalized=TRUE)))
View(dca)
dca[["TCI"]]
dca[["FROM"]]
dca[["TABLE"]]
kable(dca$TABLE)
table(dca$TABLE)
dca$TABLE
table(dca$TABLE)
kable(dca$TABLE)
head(var_d)
class(dy2012)
head(return)
class(return)
library(zoo)
test <- as.zoo(return)
data("test")
dca = ConnectednessApproach(test,
nlag=4,
nfore=10,
model="VAR",
connectedness="Time",
Connectedness_config=list(TimeConnectedness=list(generalized=TRUE)))
dca = ConnectednessApproach(test,
nlag=4,
nfore=10,
model="VAR",
connectedness="Time",
Connectedness_config=list(TimeConnectedness=list(generalized=TRUE)))
test
test <- as.zoo(return,na.omit=TRUE)
?as.zoo
test <- as.zoo(return,na.omit(test))
test <- na.omit(return)
test <- as.zoo(return)
data("test")
dca = ConnectednessApproach(test,
nlag=4,
nfore=10,
model="VAR",
connectedness="Time",
Connectedness_config=list(TimeConnectedness=list(generalized=TRUE)))
test
View(return)
dca = ConnectednessApproach(test,
nlag=4,
nfore=100,
model="VAR",
connectedness="Time",
Connectedness_config=list(TimeConnectedness=list(generalized=TRUE)))
data("acg2020")
data("acg2020")
data("test")
class(acg2020)
test <- return
data("test")
class(test)
test <- return
load("C:/Users/foha2/OneDrive/ukrain war/ukrainn war/.RData")
class(acg2020)
test <- return
View(test)
library(zoo)
library(xts)
test <- as.zoo(return)
class(test)
dcat = ConnectednessApproach(test,
nlag=4,
nfore=100,
model="VAR",
connectedness="Time",
Connectedness_config=list(TimeConnectedness=list(generalized=TRUE)))
test <- as.zoo(return[,c(1:10)])
dcat = ConnectednessApproach(test,
nlag=4,
nfore=100,
model="VAR",
connectedness="Time",
Connectedness_config=list(TimeConnectedness=list(generalized=TRUE)))
test <- as.zoo(return[,c(1:5)])
dcat = ConnectednessApproach(test,
nlag=4,
nfore=100,
model="VAR",
connectedness="Time",
Connectedness_config=list(TimeConnectedness=list(generalized=TRUE)))
test <- as.zoo(return[,c(1:3)])
dcat = ConnectednessApproach(test,
nlag=4,
nfore=100,
model="VAR",
connectedness="Time",
Connectedness_config=list(TimeConnectedness=list(generalized=TRUE)))
test <- as.zoo(return[,c(1:2)])
dcat = ConnectednessApproach(test,
nlag=4,
nfore=100,
model="VAR",
connectedness="Time",
Connectedness_config=list(TimeConnectedness=list(generalized=TRUE)))
str(acg2020)
521/4
str(test)
head(acg2020)
head(test)
test <- as.zoo(return)
head(test)
head(test[,1:2])
test <- test(,-1)
test <- test[,-1]
head(test[,1:2])
index(test)
test <- as.zoo(return)
head(test[,1:3])
index(test) <- test$Date
head(test[,1:3])
test <- test[,-1]
head(test[,1:3])
dcat = ConnectednessApproach(test,
nlag=4,
nfore=100,
model="VAR",
connectedness="Time",
Connectedness_config=list(TimeConnectedness=list(generalized=TRUE)))
class(test)
str(test)
str(acg2020)
head(test[,1:3])
index(test)
index(test) <- as.Date(test$Date)
test <- as.zoo(return)
head(test[,1:3])
Z.index <- as.Date(test$Date)
index(test) <- as.Date(test$Date,"%y-%m-%d")
index(test) <- as.Date(test$Date,"%Y-%m-%d")
Z.index <- as.Date(test$Date,"%Y-%m-%d")
Z.index <- as.Date(test$Date,"%y-%m-%d")
test$Date <- as.Date(test$Date,"%y-%m-%d")
test <- return
test$Date <- as.Date(test$Date,"%y-%m-%d")
head(test[,1:3])
index(test) <- as.Date(test$Date)
View(test)
test <- return
View(test)
datee <- as.Date(test$Date,"%y-%m-%d")
datee
datee <- as.Date(test$Date,"%Y-%m-%d")
datee
test$Date <- as.Date(test$Date,"%Y-%m-%d")
head(test[,1:3])
test <- as.zoo(test)
head(test[,1:3])
test <- test[,-1]
str(test)
index(test) <- as.Date(test$Date)
test <- return
zoo(test[,1], format(as.Date(test$Date), "%y/%m/%d"))
t<- zoo(test[,1], format(as.Date(test$Date), "%y/%m/%d"))
t
head(t)
index(test) < - test$Date <- as.Date(test$Date,"%Y-%m-%d")
index(test) <- zoo(test[,1], format(as.Date(test$Date), "%y/%m/%d"))
test <- return
index(test) <- zoo(test[,1], format(as.Date(test$Date), "%y/%m/%d"))
test <- as.zoo(test)
index(test) <- zoo(test[,1], format(as.Date(test$Date), "%y/%m/%d"))
str(acg2020)
test <- zoo(test[,1], format(as.Date(test$Date), "%y/%m/%d"))
test <- zoo(test[,1], as.Date((test$Date), format= "%y/%m/%d"))
test <- zoo(test[,1], as.Date((test$Date), format= "%Y/%m/%d"))
test <- return
test <- read.zoo(return)
head(test)
head(test[,1:3])
str(test)
dcat = ConnectednessApproach(test,
nlag=4,
nfore=100,
model="VAR",
connectedness="Time",
Connectedness_config=list(TimeConnectedness=list(generalized=TRUE)))
View(dcat)
dcat[["TABLE"]]
var_d <- read.zoo(R_dataframe)
library(ConnectednessApproach)
dca = ConnectednessApproach(var_d,
nlag=1,
nfore=12,
window.size=100,
model="TVP-VAR",
connectedness="Time",
VAR_config=list(TVPVAR=list(kappa1=0.99, kappa2=0.96, prior="BayesPrior")))
gc()
library(ConnectednessApproach)
head(test[,1:3])
str(test)
str(var_d)
View(return)
View(R_dataframe)
str(acg2020)
head(acg2020[,1:3])
head(R_dataframe[,1:10])
str(R_dataframe)
var_d <- read.zoo(return)
dca = ConnectednessApproach(var_d,
nlag=1,
nfore=12,
window.size=100,
model="TVP-VAR",
connectedness="Time",
VAR_config=list(TVPVAR=list(kappa1=0.99, kappa2=0.96, prior="BayesPrior")))
str(var_d)
head(var_d[,1:3])
head(return[,1:3])
#dy2012 model
dcat = ConnectednessApproach(var_d,
nlag=4,
nfore=100,
model="VAR",
connectedness="Time",
Connectedness_config=list(TimeConnectedness=list(generalized=TRUE)))
dcat$TABLE
#dy2012 model
dy2012 = ConnectednessApproach(var_d,
nlag=4,
nfore=100,
model="VAR",
connectedness="Time",
Connectedness_config=list(TimeConnectedness=list(generalized=TRUE)))
head(acg2020)
class(acg2020)
str(acg2020)
str(var_d)
head(var_d[,1:3])
#acg2020 model
acg2020 = ConnectednessApproach(var_d,
nlag=1,
nfore=6,
window.size=50,
model="TVP-VAR",
connectedness="Time",
VAR_config=list(TVPVAR=list(kappa1=0.99, kappa2=0.96, prior="BayesPrior")))
#acg2020 model
acg2020 = ConnectednessApproach(var_d,
nlag=1,
nfore=2,
window.size=10,
model="TVP-VAR",
connectedness="Time",
VAR_config=list(TVPVAR=list(kappa1=0.99, kappa2=0.96, prior="BayesPrior")))
PlotTCI(dca, ca=DCA, ylim=c(20,80))
library(ConnectednessApproach)
install.packages(ConnectednessApproach)
library(devtools)
install_github("GabauerDavid/ConnectednessApproach")
library(ConnectednessApproach)
install_github("GabauerDavid/ConnectednessApproach")
library(devtools)
install_github("GabauerDavid/ConnectednessApproach")
library(ConnectednessApproach)
install_github("GabauerDavid/ConnectednessApproach")
library(ConnectednessApproach)
install.packages("devtools")
library(ConnectednessApproach)
########################################################
#****           Time Varying Parameter *** ###
########################################################
library(devtools)
install_github("GabauerDavid/ConnectednessApproach")
library(ConnectednessApproach)
install_github("GabauerDavid/ConnectednessApproach")
library(ConnectednessApproach)
library(ConnectednessApproach)
install_github("GabauerDavid/ConnectednessApproach")
install_github("GabauerDavid/ConnectednessApproach")
library(ConnectednessApproach)
library(devtools)
install_github("GabauerDavid/ConnectednessApproach")
library(ConnectednessApproach)
########################################################
#****           Time Varying Parameter *** ###
########################################################
library(devtools)
library(ConnectednessApproach)
library(ConnectednessApproach)
install.packages("devtools")
library(devtools)
install_github("GabauerDavid/ConnectednessApproach")
library(ConnectednessApproach)
library(devtools)
install.packages("devtools")
library(devtools)
install_github("GabauerDavid/ConnectednessApproach")
library(ConnectednessApproach)
#acg2020 model
acg2020 = ConnectednessApproach(var_d,
nlag=1,
nfore=12,
window.size=100,
model="TVP-VAR",
connectedness="Time",
VAR_config=list(TVPVAR=list(kappa1=0.99, kappa2=0.96, prior="BayesPrior")))
View(acg2020)
acg2020[["TABLE"]]
PlotTCI(acg2020, ca=DCA, ylim=c(20,80))
PlotNET(acg2020, ca=DCA, ylim=c(-20,20))
PlotNPDC(acg2020, ca=DCA, ylim=c(-20,20))
PlotNPDC(acg2020, ca=DCA)
View(acg2020)
acg2020[["TABLE"]]
library(ConnectednessApproach)
View(acg2020)
acg2020[["TABLE"]]
View(dy2012)
dy2012[["TABLE"]]
spill2012 <- dy2012$TABLE
spill2012 <- as.data.frame(dy2012$TABLE)
View(spill2012)
library(writexl)
install.packages("writexl")
library(writexl)
write_xlsx(spill2012,"spill2012.xls")
View(spill2012)
spill2012 <- cbind(rownames(spill2012),spill2012)
head(spill2012[,1:3])
write_xlsx(spill2012,"spill2012.xlsx")
dy2012
View(dy2012)
PlotTCI(acg2020, ca=DCA, ylim=c(20,80))
library(ConnectednessApproach)
PlotTCI(acg2020, ca=DCA, ylim=c(20,80))
PlotTCI(acg2020, ca=DCA, ylim=c(20,150))
PlotNET(acg2020, ca=DCA, ylim=c(-20,20))
PlotFROM(acg2020, ylim=c(0,60))
PlotFROM(acg2020, ylim=c(0,100))
PlotFROM(acg2020, ylim=c(0,110))
PlotFROM(acg2020, ylim=c(0,130))
PlotTO(acg2020, ylim=c(0,60))
PlotTO(acg2020, ylim=c(0,130))
PlotTO(acg2020, ylim=c(0,150))
PlotTO(acg2020, ylim=c(0,180))
PlotTO(acg2020, ylim=c(0,200))
PlotNET(acg2020, ylim=c(-30,30))
PlotNET(acg2020, ca=DCA, ylim=c(-20,20))
PlotNET(acg2020, ylim=c(-30,30))
PlotNPDC(acg2020, ylim=c(-20,20))
PlotNPDC(acg2020, ylim=c(-100,200))
PlotNPDC(acg2020, ylim=c(-100,200))
#PlotNPDC(acg2020, ylim=c(-10,20))
PlotPCI(acg2020)
dy2012
var_d
head(var_d[,1:3])
head(return[,1:3])
head(acg2020[,1:3])
View(acg2020)
acg2020[["TABLE"]]
spillacg2020 <- as.data.frame(acg2020$TABLE)
head(acg2020[,1:3])
head(spillacg2020[,1:3])
spillacg2020 <- cbind(rownames(spillacg2020),spillacg2020)
head(spillacg2020[,1:3])
library(writexl)
write_xlsx(spillacg2020,"spillacg2020.xlsx")
PlotTCI(acg2020, ca=DCA, ylim=c(20,150))  #the average
library(ConnectednessApproach)
PlotTCI(acg2020, ca=DCA, ylim=c(20,150))  #the average
PlotTCI(acg2020, ca=DCA, ylim=c(20,120))  #the average
PlotTCI(acg2020, ca=DCA, ylim=c(20,100))  #the average
PlotNET(acg2020, ylim=c(-20,20))
PlotNET(acg2020, ylim=c(-20,100))
PlotNET(acg2020, ylim=c(-70,100))
PlotNET(acg2020, ylim=c(-100,100))
head(datana)
head(data)
View(envt1)
envt1[["000001.SS"]]
#---------------------------------------------------------
#             Variance measure             #####
vola <- do.call(merge, eapply(envt1, h))
#---------------------------------------------------------
#             Variance measure             #####
vola <- do.call(merge, eapply(envt1, cl))
?getsymbols
library(quantmod)
?getsymbols
?Getsymbols
#---------------------------------------------------------
#             Variance measure             #####
vola <- do.call(merge, eapply(envt1, o))
#---------------------------------------------------------
#             Variance measure             #####
vola <- do.call(merge, eapply(envt1, O))
#---------------------------------------------------------
#             Variance measure             #####
vola <- do.call(merge, eapply(envt1, l))
#---------------------------------------------------------
#             Variance measure             #####
vola <- do.call(merge, eapply(envt1, L))
#---------------------------------------------------------
#             Variance measure             #####
vola <- do.call(merge, eapply(envt1, op))
envt1[1]
View(envt1)
envt1[[".getSymbols"]]
envt1[["000001.SS"]]
#---------------------------------------------------------
#             Variance measure             #####
vola <- do.call(merge, eapply(envt1, Lo))
View(vola)
#---------------------------------------------------------
#             Variance measure             #####
lowp <- do.call(merge, eapply(envt1, Lo))
hip <- do.call(merge, eapply(envt1, Hi))
View(envt1)
envt1[["BTC-USD"]]
#---------------------------------------------------------
#             Variance measure             #####
lowp <- do.call(merge, eapply(envt1, Lo))
library(quantmod)
#---------------------------------------------------------
#             Variance measure             #####
lowp <- do.call(merge, eapply(envt1, Lo))
hip <- do.call(merge, eapply(envt1, Hi))
View(lowp)
vari <- 0.361*(ln(hip)-ln(lowp))^2
vari <- 0.361*(Ln(hip)-Ln(lowp))^2
?log
vari <- 0.361*(Log(hip)-Log(lowp))^2
vari <- 0.361*(log(hip)-log(lowp))^2
View(vari)
View(lowp)
View(hip)
plot(vari$BVSP.High)
plot(vari$NSEI.High)
