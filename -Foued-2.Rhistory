edge.arrow.size=0.5)
legend(x=-1.5, y=-1.1, c("CRYPTO","EUROPE","ASIA","AMERICA","VIX"),
pch=21, col="#777777", pt.bg=colrss, pt.cex=2, cex=.8, bty="n",
ncol=1)
plot(Neural,layout=layout_on_sphere, vertex.shape="circle",
vertex.size=Neural_eig,vertex.label.cex=0.7,edge.width=2,
edge.arrow.size=0.5)
legend(x=-1.5, y=-1.1, c("CRYPTO","EUROPE","ASIA","AMERICA","VIX"),
pch=21, col="#777777", pt.bg=colrss, pt.cex=2, cex=.8, bty="n",
ncol=1)
plot(Neural,layout=layout_on_sphere, vertex.shape="circle",
vertex.size=Neural_eig*15,vertex.label.cex=0.7,edge.width=2,
edge.arrow.size=0.5)
legend(x=-1.5, y=-1.1, c("CRYPTO","EUROPE","ASIA","AMERICA","VIX"),
pch=21, col="#777777", pt.bg=colrss, pt.cex=2, cex=.8, bty="n",
ncol=1)
edge <- read_excel("edge sincenov21.xlsx") # after Nov-21
Neural <- graph_from_data_frame(d=edge, vertices=noeuds, directed=T)
#E(Neural)$weight <- E(Neural)$pro
#Neural[c(1:3),c(1:3)]
#**************degree centrality************####
Neural_deg <- degree(Neural,mode=c("all"))
V(Neural)$degree <- Neural_deg
V(Neural)$degree
which.max(Neural_deg)
#*************eigenvector centrality***********####
Neural_eig <- evcent(Neural)$vector
V(Neural)$eigen <- Neural_eig
which.max(Neural_eig)
#**************Betweenness centrality***********####
Neural_bet <- betweenness(Neural,directed=F)
V(Neural)$betweeness <- Neural_bet
which.max(Neural_bet)
#**************plot graph*********************####
DF <- as_long_data_frame(Neural)
set.seed(1010)
colrss <- c("grey", "tomato","orange","green","black")
V(Neural)$color <- colrss[V(Neural)$type]
edge.start <- ends(Neural, es=E(Neural), names=F)[,1]
edge.col <- V(Neural)$color[edge.start]
plot(Neural,layout=layout_on_sphere, vertex.shape="circle",
vertex.size=Neural_eig*15,vertex.label.cex=0.7,edge.width=2,
edge.arrow.size=0.5)
legend(x=-1.5, y=-1.1, c("CRYPTO","EUROPE","ASIA","AMERICA","VIX"),
pch=21, col="#777777", pt.bg=colrss, pt.cex=2, cex=.8, bty="n",
ncol=1)
plot(Neural,layout=layout_on_sphere, vertex.shape="circle",
vertex.size=Neural_bet,vertex.label.cex=0.7,edge.width=2,
edge.arrow.size=0.5)
legend(x=-1.5, y=-1.1, c("CRYPTO","EUROPE","ASIA","AMERICA","VIX"),
pch=21, col="#777777", pt.bg=colrss, pt.cex=2, cex=.8, bty="n",
ncol=1)
plot(Neural,layout=layout_on_sphere, vertex.shape="circle",
vertex.size=Neural_deg,vertex.label.cex=0.7,edge.width=2,
edge.arrow.size=0.5)
legend(x=-1.5, y=-1.1, c("CRYPTO","EUROPE","ASIA","AMERICA","VIX"),
pch=21, col="#777777", pt.bg=colrss, pt.cex=2, cex=.8, bty="n",
ncol=1)
plot(Neural,layout=layout_on_sphere, vertex.shape="circle",
vertex.size=Neural_deg,vertex.label.cex=0.7,edge.width=2,
edge.arrow.size=0.5)
plot(Neural,layout=layout_on_sphere, vertex.shape="circle",
vertex.size=Neural_bet,vertex.label.cex=0.7,edge.width=2,
edge.arrow.size=0.5)
plot(Neural,layout=layout_on_sphere, vertex.shape="circle",
vertex.size=Neural_eig,vertex.label.cex=0.7,edge.width=2,
edge.arrow.size=0.5)
plot(Neural,layout=layout_on_sphere, vertex.shape="circle",
vertex.size=Neural_eig*20,vertex.label.cex=0.7,edge.width=2,
edge.arrow.size=0.5)
edge <- read_excel("edge ukrain.xlsx") # after Nov-21
Neural <- graph_from_data_frame(d=edge, vertices=noeuds, directed=T)
#E(Neural)$weight <- E(Neural)$pro
#Neural[c(1:3),c(1:3)]
#**************degree centrality************####
Neural_deg <- degree(Neural,mode=c("all"))
V(Neural)$degree <- Neural_deg
V(Neural)$degree
which.max(Neural_deg)
#*************eigenvector centrality***********####
Neural_eig <- evcent(Neural)$vector
V(Neural)$eigen <- Neural_eig
which.max(Neural_eig)
#**************Betweenness centrality***********####
Neural_bet <- betweenness(Neural,directed=F)
V(Neural)$betweeness <- Neural_bet
which.max(Neural_bet)
#**************plot graph*********************####
DF <- as_long_data_frame(Neural)
set.seed(1010)
colrss <- c("grey", "tomato","orange","green","black")
V(Neural)$color <- colrss[V(Neural)$type]
edge.start <- ends(Neural, es=E(Neural), names=F)[,1]
edge.col <- V(Neural)$color[edge.start]
plot(Neural,layout=layout_on_sphere, vertex.shape="circle",
vertex.size=Neural_deg,vertex.label.cex=0.7,edge.width=2,
edge.arrow.size=0.5)
legend(x=-1.5, y=-1.1, c("CRYPTO","EUROPE","ASIA","AMERICA","VIX"),
pch=21, col="#777777", pt.bg=colrss, pt.cex=2, cex=.8, bty="n",
ncol=1)
plot(Neural,layout=layout_on_sphere, vertex.shape="circle",
vertex.size=Neural_bet,vertex.label.cex=0.7,edge.width=2,
edge.arrow.size=0.5)
legend(x=-1.5, y=-1.1, c("CRYPTO","EUROPE","ASIA","AMERICA","VIX"),
pch=21, col="#777777", pt.bg=colrss, pt.cex=2, cex=.8, bty="n",
ncol=1)
plot(Neural,layout=layout_on_sphere, vertex.shape="circle",
vertex.size=Neural_eig,vertex.label.cex=0.7,edge.width=2,
edge.arrow.size=0.5)
legend(x=-1.5, y=-1.1, c("CRYPTO","EUROPE","ASIA","AMERICA","VIX"),
pch=21, col="#777777", pt.bg=colrss, pt.cex=2, cex=.8, bty="n",
ncol=1)
plot(Neural,layout=layout_on_sphere, vertex.shape="circle",
vertex.size=Neural_eig*20,vertex.label.cex=0.7,edge.width=2,
edge.arrow.size=0.5)
legend(x=-1.5, y=-1.1, c("CRYPTO","EUROPE","ASIA","AMERICA","VIX"),
pch=21, col="#777777", pt.bg=colrss, pt.cex=2, cex=.8, bty="n",
ncol=1)
edge <- read_excel("edge sincenov21.xlsx") # after Nov-21
Neural <- graph_from_data_frame(d=edge, vertices=noeuds, directed=T)
#E(Neural)$weight <- E(Neural)$pro
#Neural[c(1:3),c(1:3)]
#**************degree centrality************####
Neural_deg <- degree(Neural,mode=c("all"))
V(Neural)$degree <- Neural_deg
V(Neural)$degree
which.max(Neural_deg)
#*************eigenvector centrality***********####
Neural_eig <- evcent(Neural)$vector
V(Neural)$eigen <- Neural_eig
which.max(Neural_eig)
#**************Betweenness centrality***********####
Neural_bet <- betweenness(Neural,directed=F)
V(Neural)$betweeness <- Neural_bet
which.max(Neural_bet)
#**************plot graph*********************####
DF <- as_long_data_frame(Neural)
set.seed(1010)
colrss <- c("grey", "tomato","orange","green","black")
V(Neural)$color <- colrss[V(Neural)$type]
edge.start <- ends(Neural, es=E(Neural), names=F)[,1]
edge.col <- V(Neural)$color[edge.start]
plot(Neural,layout=layout_on_sphere, vertex.shape="circle",
vertex.size=Neural_eig*20,vertex.label.cex=0.7,edge.width=2,
edge.arrow.size=0.5)
legend(x=-1.5, y=-1.1, c("CRYPTO","EUROPE","ASIA","AMERICA","VIX"),
pch=21, col="#777777", pt.bg=colrss, pt.cex=2, cex=.8, bty="n",
ncol=1)
plot(Neural,layout=layout_on_sphere, vertex.shape="circle",
vertex.size=Neural_deg,vertex.label.cex=0.7,edge.width=2,
edge.arrow.size=0.5)
legend(x=-1.5, y=-1.1, c("CRYPTO","EUROPE","ASIA","AMERICA","VIX"),
pch=21, col="#777777", pt.bg=colrss, pt.cex=2, cex=.8, bty="n",
ncol=1)
plot(Neural,layout=layout_on_sphere, vertex.shape="circle",
vertex.size=Neural_bet,vertex.label.cex=0.7,edge.width=2,
edge.arrow.size=0.5)
legend(x=-1.5, y=-1.1, c("CRYPTO","EUROPE","ASIA","AMERICA","VIX"),
pch=21, col="#777777", pt.bg=colrss, pt.cex=2, cex=.8, bty="n",
ncol=1)
View(R_dataframe)
View(t1)
install.packages("Spillover")
library(Spillover)
?Spillover
data(stock.prices)
head(stock.prices)
#********************************************************
#*            Volatility Spillovers and Connectedness *****
#*************************************************************
library(vars)
View(data)
library(quantmod)
envt1
View(envt1)
envt1[["000001.SS"]]
envt1[["000001.SS"]]
envt1[["BTC-USD"]]
chart.TimeSeries(envt1$`BTC-USD`,lwd=2,auto.grid=F)
library(quantmod)
chart.TimeSeries(envt1$`BTC-USD`,lwd=2,auto.grid=F)
library(PerformanceAnalytics)
chart.TimeSeries(envt1$`BTC-USD`,lwd=2,auto.grid=F)
chart.TimeSeries(envt1$`BTC-USD`)
chart.TimeSeries(envt1$FCHI)
envt1[[".getSymbols"]]
str(.getSymbols)
test <- do.call("rbind", envt1)
test <- do.call("rbind", .getSymbols)
View(test)
envt1[["000001.SS"]]
#********************************************************
#*            Volatility Spillovers and Connectedness *****
#*************************************************************
datav <- do.call(merge, eapply(envt1, cbind(Cl,aj)))
?getSymbols
#********************************************************
#*            Volatility Spillovers and Connectedness *****
#*************************************************************
datav <- do.call(merge, eapply(envt1, cbind(Cl,Aj)))
#********************************************************
#*            Volatility Spillovers and Connectedness *****
#*************************************************************
datav <- do.call(merge, eapply(envt1, cbind(Cl,A)))
#********************************************************
#*            Volatility Spillovers and Connectedness *****
#*************************************************************
datav <- do.call(merge, eapply(envt1, cbind(Cl,AJ)))
envt1[[".getSymbols"]][["^N225"]]
envt1[[".getSymbols"]][["^BVSP"]]
envt1[["FTSEMIB.MI"]]
#********************************************************
#*            Volatility Spillovers and Connectedness *****
#*************************************************************
datav <- do.call(merge, eapply(envt1, cbind(Cl,Ad)))
#********************************************************
#*            Volatility Spillovers and Connectedness *****
#*************************************************************
datav <- do.call(merge, eapply(envt1, cbind))
View(datav)
str(datav)
View(datav)
View(data)
View(envt1)
envt1[["BTC-USD"]]
datavv <- do.call(merge, eapply(envt1, o))
datavv <- do.call(merge, eapply(envt1, O))
datavv <- do.call(merge, eapply(envt1, Op))
datavv <- do.call(merge, eapply(envt1, Adj))
datavv <- do.call(merge, eapply(envt1, Ad))
datavv <- do.call(merge, eapply(envt1, Aj))
datavv <- do.call(merge, eapply(envt1, Cl))
datavv <- do.call(merge, eapply(envt1, Cl))
library(quantmod)
datavv <- do.call(merge, eapply(envt1, O))
datavv <- do.call(merge, eapply(envt1, l))
datavv <- do.call(merge, eapply(envt1, lw))
datavv <- do.call(merge, eapply(envt1, Cl))
install.packages("qmap")
rm(datavv)
tickers = c('AMZN','AAPL','MSFT')
prices <- PF(tickers, silent=TRUE)
library(qmop)
library(qmod)
library(qmap)
prices <- PF(tickers, silent=TRUE)
install.packages("qmao", repos="http://R-Forge.R-project.org")
library(qmao)
library(qmao)
library(qmao)
library(qmao)
library(qmao)
detach("package:qmap", unload = TRUE)
View(data)
library(quantmod)
library(xts)
library(zoo)
View(data)
View(R_data)
datav <- na.omit(datav)
View(datav)
R_datav <- diff(log(datav))
View(R_datav)
?quantmod
R_datav <- as.quantmod.OHLC(datav,c("High","Low"))
R_datav <- as.quantmod.OHLC(datav,c("Oppen","High","Low","Close",
"Volume", "Adjusted"))
R_datav <- dailyReturn(datav)
View(R_datav)
rm(datav)
#********************************************************
#*            Volatility Spillovers and Connectedness *****
#*************************************************************
datav <- do.call(merge, eapply(envt1, cbind))
datav <- na.omit(datav)
rm(R_datav)
R_datav <- dailyReturn(datav)
Ad(datav$NSEI.Open)
Ad(datav)
Lo(datav)
Hi(datav)
R_datav <- log(Hi(datav))-log(Lo(datav))
View(R_datav)
R_datav <- Hi(datav)-Lo(datav)
rm(R_datav)
v_datav <- 0.361*(log((Hi(datav))-log(Lo(datav))))
v_datav <- 0.361*(log(Hi(datav))-log(Lodatav))^2
v_datav <- 0.361*(log(Hi(datav))-log(Lo(datav)))^2
library(PerformanceAnalytics)
chart.TimeSeries(v_datav,lwd=2,auto.grid=F,ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
sd_datav <- 1/sinh(sqrt(252*v_datav))
View(sd_datav)
chart.TimeSeries(sd_datav,lwd=2,auto.grid=F,ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
summary(sd_datav)
View(sd_datav)
chart.TimeSeries(sd_datav,lwd=2,auto.grid=F,ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(sd_datav,lwd=2,auto.grid=F,ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",
legend.loc="topright")
chart.TimeSeries(sd_datav,auto.grid=F,ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",
legend.loc="topright")
chart.TimeSeries(sd_datav)
plot(sd_datav$NSEI.High)
plot(sd_datav$GSPC.High)
plot(sd_datav$IMOEX.ME.High)
View(sd_datav)
library(quantmod)
library(xts)
View(sd_datav)
library(PerformanceAnalytics)
chart.TimeSeries(sd_datav,lwd=2,auto.grid=F,ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
rm(sd_datav)
volt <- 1/sinh(sqrt(252*v_datav))
chart.TimeSeries(volt,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
str(volt)
summary(volt)
View(volt)
class(volt)
volt$NSEI.High
?PerformanceAnalytics
chart.TimeSeries(volt,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
volt <- na.omit(volt)
chart.TimeSeries(volt,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt$LTC.USD.High,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt$GSPC.High,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt.High,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1, ylim=100,
legend.loc="topright")
chart.TimeSeries(volt,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1, ylim=NULL,
legend.loc="topright")
library(vars)
vol_var = VAR(volt,p=3,type="none")
which(is.na(volt), arr.ind=TRUE)
which(is.na(volt$NSEI.High), arr.ind=TRUE)
which(is.na(volt$USDT.USD.High), arr.ind=TRUE)
which(is.na(volt$LTC.USD.High), arr.ind=TRUE)
which(is.na(volt$ETH.USD.High), arr.ind=TRUE)
vol_var = VAR(volt,p=3,type="none")
chart.TimeSeries(volt$LTC.USD.High,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt$ETH.USD.High,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt$IMOEX.ME.High,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt$M.BA.High,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt$MXX.High,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt$X000001.SS.High,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt$VIX.High,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt$GDAXI.High,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt$KS11.High,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt$XU100.IS.High,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt$FCHI.High,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt$FTSE.High,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt$N225.High,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt$BVSP.High,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt$JKII.High,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt$GSPTSE.High,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
chart.TimeSeries(volt$FTSEMIB.MI.High,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
View(volt)
summary(volt)
v_datav <- 0.361*(log(Hi(datav))-log(Lo(lag(datav))))^2
volt <- 1/sinh(sqrt(252*v_datav))
chart.TimeSeries(volt,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
summary(volt)
v_datav <- 0.361*(log(Hi(datav))-log(Lo(datav)))^2
volt <- 1/sinh(sqrt(252*v_datav))
chart.TimeSeries(volt,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
summary(volt)
volt[volt == Inf] <- lag(volt)
summary(volt)
chart.TimeSeries(volt,lwd=2,auto.grid=F,
ylab="Annualized Log Volatility",xlab="Time",
main="Log Volatility",lty=1,
legend.loc="topright")
volt <- 1/sinh(sqrt(252*v_datav))
summary(volt)
volt[volt == Inf] <- lag(volt)
volt <- 1/sinh(sqrt(252*v_datav))
volt[volt == Inf] <- lag(volt)
which(volt=11.817886)
which(volt==11.817886)
any(volt==11.817886)
any(dataframe(volt)==11.817886))
any(data.frame(volt)==11.817886))
any(data.frame(volt)==11.817886)
any(as.dataframe(volt)==11.817886)
any(as.data.frame(volt)==11.817886)
vol_var = VAR(volt,p=3,type="none")
volt <- na.omit(volt)
vol_var = VAR(volt,p=3,type="none")
amat <- diag(ncol(vol.data))
amat <- diag(ncol(volt))
amat[lower.tri(amat)] <- NA
vol_svar = SVAR(vol_var,Amat = amat,estmethod = "direct")
### extract residuals of the VAR
res_t <- residuals(vol_var)
svar_ecov <- vol_svar$Sigma.U
View(vol_svar)
View(res_t)
MA_lag <- 10
theta_temp <- Phi(vol_var,nstep = MA_lag)
svar_theta_temp <- Phi(vol_svar,nstep = MA_lag)
### extract MA coefficients
theta.list <- alply(theta_temp,3)
install.packages("plyr")
### extract MA coefficients
theta.list <- alply(theta_temp,3)
### extract MA coefficients
library(plyr)
theta.list <- alply(theta_temp,3)
svar_theta_list <- alply(svar_theta_temp,3)
#--------Step 3. Impulse Response Function (IRF)-------####
g.fevd(Vol_var, 10)
#--------Step 3. Impulse Response Function (IRF)-------####
fevd(Vol_var, 10)
#--------Step 3. Impulse Response Function (IRF)-------####
fevd(vol_var, 10)
#--------Step 3. Impulse Response Function (IRF)-------####
spil <- fevd(vol_var, 10)
View(spil)
spil[["XU100.IS.High"]]
svar_theta_list
View(svar_ecov)
